#!/bin/bash

#
# Author: Arkadiusz DziÄ™giel <arkadiusz.dziegiel@glorpen.pl>
#

. /opt/puppetizer/share/common.sh

build_env_path="${puppet_env_dir}/build"
use_puppetdb="n"

# arguments parsing
while getopts "p:" o; do
    case "${o}" in
        p)
            use_puppetdb="${OPTARG}"
            shift;;
        *)
            exit 1
            ;;
    esac
done
shift $(($OPTIND - 1))

function cleanup()
{
	echo "... cleaning up"
	
	# cleanup
	yum clean all
	
	# remove build env
	rm -rf "${build_env_path}"
	
	# clear puppet cache
	rm -rf /opt/puppetlabs/puppet/cache/{reports,state}/
}

function setup_puppetdb()
{
	echo "... enabling PuppetDB integration"
	
	# check if its not already enabled
	if [ $(grep 'puppetdb' /etc/puppetlabs/puppet/puppet.conf | wc -l) -gt 0 ];
	then
		echo "PuppetDB was already enabled before"
		exit 1
	fi
	
	# enable puppetdb
	cat << EOF >> "${puppet_config_dir}/puppet.conf"
[main]
storeconfigs = true
storeconfigs_backend = puppetdb
report = false
reports = puppetdb
EOF
	
	cat << EOF >> "${puppet_config_dir}/puppetdb.conf"
[main]
server_urls = https://puppetdb:8081
soft_write_failure = false
EOF
	
	cat << EOF > "${puppet_config_dir}/routes.yaml"
---
apply:
  catalog:
    terminus: compiler
    cache: puppetdb
  resource:
    #terminus: ral
    cache: puppetdb
  facts:
    terminus: facter
    cache: puppetdb_apply
EOF
}

function puppet_build()
{
	setup_puppetizer_modules
	
	mkdir -p "${build_env_path}"
	puppet_apply build
}


#
# main flow
#

puppet_build

# setup puppetdb after build so there is no
# orphaned storeconfigs
if [ "z${use_puppetdb}" == "zy" ];
then
	setup_puppetdb
else
	echo "... skipping PuppetDB integration"
fi

cleanup
